#include "ros/ros.h"
#include "quadrotor_msgs/LinearCommand.h"
#include "sensor_msgs/Joy.h"
#include "eigen3/Eigen/Geometry"

static ros::Publisher linear_command_pub;
static quadrotor_msgs::LinearCommand linear_command;
static double scale_f = 20.0;
static double scale_rpy = 0.5;
static double deadband = 0.1;  // deadband

void JoyMsgCb(const sensor_msgs::JoyConstPtr &joy_msg)
{
  double thrust, roll, pitch, yaw;

  roll   = -joy_msg->axes[3];
  pitch  = joy_msg->axes[4];
  thrust = joy_msg->axes[1];
  yaw    = joy_msg->axes[0];

  if (-deadband < thrust && deadband > thrust) thrust = 0.0;
  if (-deadband < roll && deadband > roll)   roll = 0.0;
  if (-deadband < pitch && deadband > pitch) pitch = 0.0; 
  if (-deadband < yaw && deadband > yaw)     yaw = 0.0;
  
  roll = roll * scale_rpy;
  pitch = pitch * scale_rpy;
  yaw = yaw * scale_rpy;
  thrust = thrust * scale_f;
  //roll = 0;
  //pitch = 0;
  //yaw = 0;
  // Orientation
  Eigen::AngleAxisd yawAngle(yaw, Eigen::Vector3d::UnitZ());
  Eigen::AngleAxisd rollAngle(roll, Eigen::Vector3d::UnitX());
  Eigen::AngleAxisd pitchAngle(pitch, Eigen::Vector3d::UnitY());
  Eigen::Quaterniond orientation = yawAngle * rollAngle * pitchAngle;
   
  // thrust
  //linear_command.force.z = thrust;
  linear_command.force.z = 0;
  linear_command.header.stamp = ros::Time::now();
  linear_command.orientation.x = orientation.x();
  linear_command.orientation.y = orientation.y();
  linear_command.orientation.z = orientation.z();
  linear_command.orientation.w = orientation.w(); 
  linear_command_pub.publish(linear_command);

}



int main(int argc, char **argv)
{
  ros::init(argc, argv, "JoystickLinearControlNode");
  
  ros::NodeHandle nh_;
  
  ros::Subscriber joy_sub = nh_.subscribe<sensor_msgs::Joy>("joy", 10, &JoyMsgCb);
  linear_command_pub = nh_.advertise<quadrotor_msgs::LinearCommand>("linear_cmd", 10);

  // Initialize
  linear_command.header.frame_id = "/quadrotor";  
  linear_command.kR[0] = 1.2665;  
  linear_command.kR[1] = 0.0312;  
  linear_command.kR[2] = 1.1037;
  linear_command.kOm[0] = 0.2111;  
  linear_command.kOm[1] = 0.0111;  
  linear_command.kOm[2] = 0.2453;

  ros::spin();

  return 0;
}


