#include <ros/ros.h>
#include <nav_msgs/Odometry.h>
#include <nav_msgs/Path.h>
#include <tf/transform_broadcaster.h>
#include <visualization_msgs/Marker.h>
#include <visualization_msgs/MarkerArray.h>
#include <geometry_msgs/Point.h>
#include <quadrotor_msgs/PositionCommand.h>

static std::string mesh_resource;
static ros::Publisher pub_vis;
static ros::Publisher pub_pt;
static double color_r, color_g, color_b, color_a;
static visualization_msgs::Marker quad_1, quad_2, quad_3;
static visualization_msgs::Marker obst_1, obst_2;
static visualization_msgs::Marker points;
static ros::Time current_time, last_time;
static double dt = 0;


// odometry callback function
void odom_callback(const nav_msgs::Odometry::ConstPtr &msg)
{
  // tf 
  static tf::TransformBroadcaster br;
  tf::Transform transform;
  transform.setOrigin( tf::Vector3(msg->pose.pose.position.x,
                                   msg->pose.pose.position.y, 
                                   msg->pose.pose.position.z));
  tf::Quaternion q =
  tf::Quaternion(msg->pose.pose.orientation.x, 
               msg->pose.pose.orientation.y,
               msg->pose.pose.orientation.z,
               msg->pose.pose.orientation.w);
  //q.x() = msg->pose.pose.orientation.x;
  //q.y() = msg->pose.pose.orientation.y;
  //q.z() = msg->pose.pose.orientation.z;
  //q.w() = msg->pose.pose.orientation.w;
  transform.setRotation(q);
  br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "simulator", "Body"));
  
  // quad
  quad_3.header.frame_id = quad_2.header.frame_id = quad_1.header.frame_id = msg->header.frame_id;
  quad_3.header.stamp = quad_2.header.stamp = quad_1.header.stamp = ros::Time(); // time 0 so that the marker will be displayed regardless of the current time

  // obstacle
  obst_1.header.frame_id = msg->header.frame_id;
  obst_1.header.stamp = ros::Time();
  obst_2.header.frame_id = msg->header.frame_id;
  obst_2.header.stamp = ros::Time();

  // points
  points.header.frame_id = msg->header.frame_id;
  points.header.stamp = ros::Time();

  // quad 1 state information
  quad_1.pose.position.x = msg->pose.pose.position.x;
  quad_1.pose.position.y = msg->pose.pose.position.y;
  quad_1.pose.position.z = msg->pose.pose.position.z;
  quad_1.pose.orientation.x = msg->pose.pose.orientation.x;
  quad_1.pose.orientation.y = msg->pose.pose.orientation.y;
  quad_1.pose.orientation.z = msg->pose.pose.orientation.z;
  quad_1.pose.orientation.w = msg->pose.pose.orientation.w;

  // quad 2 state information
  quad_2.pose.position.x = msg->pose.pose.position.x + 3;;
  quad_2.pose.position.y = msg->pose.pose.position.y + 3;;
  quad_2.pose.position.z = msg->pose.pose.position.z;
  quad_2.pose.orientation.x = msg->pose.pose.orientation.x;
  quad_2.pose.orientation.y = msg->pose.pose.orientation.y;
  quad_2.pose.orientation.z = msg->pose.pose.orientation.z;
  quad_2.pose.orientation.w = msg->pose.pose.orientation.w;

  // quad 3 state information
  quad_3.pose.position.x = msg->pose.pose.position.x + 3;;
  quad_3.pose.position.y = msg->pose.pose.position.y - 3;;
  quad_3.pose.position.z = msg->pose.pose.position.z;
  quad_3.pose.orientation.x = msg->pose.pose.orientation.x;
  quad_3.pose.orientation.y = msg->pose.pose.orientation.y;
  quad_3.pose.orientation.z = msg->pose.pose.orientation.z;
  quad_3.pose.orientation.w = msg->pose.pose.orientation.w;



  // obst_1 state information

  // obst_2 state information
  current_time = ros::Time::now();
  if ((current_time - last_time).toSec() > 0.05)
  {     
    obst_2.pose.position.x = -3;;
    obst_2.pose.position.y = 0 + cos(dt);
    obst_2.pose.position.z = 2 + sin(dt);
    obst_2.pose.orientation.x = 0.0;
    obst_2.pose.orientation.y = 0.0;
    obst_2.pose.orientation.z = 0.0;
    obst_2.pose.orientation.w = 1.0;

    dt = dt + 0.01;
    last_time = ros::Time::now();
  }
   
  // publish  markers
  pub_vis.publish(quad_1);
  //pub_vis.publish(quad_2);
  //pub_vis.publish(quad_3);
  //pub_vis.publish(obst_1);
  //pub_vis.publish(obst_2);
  pub_pt.publish(points);
}

void pos_callback(const quadrotor_msgs::PositionCommand::ConstPtr &msg)
{
  points.pose.position.x = msg->position.x;
  points.pose.position.y = msg->position.y;
  points.pose.position.z = msg->position.z;

   
}

// Initialize Quadrotor
void quad_init()
{
  quad_3.ns = quad_2.ns = quad_1.ns = "mesh_visualization";
  quad_3.type = quad_2.type = quad_1.type = visualization_msgs::Marker::MESH_RESOURCE;
  quad_3.action = quad_2.action = quad_1.action = visualization_msgs::Marker::ADD;

  quad_3.scale.x = quad_2.scale.x = quad_1.scale.x = 1;
  quad_3.scale.y = quad_2.scale.y = quad_1.scale.y = 1;
  quad_3.scale.z = quad_2.scale.z = quad_1.scale.z = 1;

  quad_1.id = 0;
  quad_1.color.a = color_a;
  quad_1.color.r = color_r;
  quad_1.color.g = color_g;
  quad_1.color.b = color_b;
  
  quad_2.id = 1;
  quad_2.color.a = 1.0;
  quad_2.color.r = 0.0;
  quad_2.color.g = 1.0;
  quad_2.color.b = 0.0;

  quad_3.id = 2;
  quad_3.color.a = 1.0;
  quad_3.color.r = 1.0;
  quad_3.color.g = 0.0;
  quad_3.color.b = 0.0;
  quad_3.mesh_resource = quad_2.mesh_resource = quad_1.mesh_resource = mesh_resource;
}

// Inilizatize Obstacles
void obst_init()
{ 
  last_time = current_time = ros::Time::now();

  obst_2.ns = obst_1.ns = "mesh_visualization";
  obst_1.type = visualization_msgs::Marker::CUBE;
  obst_2.action = obst_1.action = visualization_msgs::Marker::ADD;
  obst_2.type = visualization_msgs::Marker::SPHERE;

  points.ns = "mesh_visualization";
  points.type = visualization_msgs::Marker::SPHERE;
  points.action = visualization_msgs::Marker::ADD;

  points.color.a = 1.0;
  points.color.r = 0.0;
  points.color.g = 1.0;
  points.color.b = 1.0;

  points.id = 6;
  points.scale.x = 0.1;
  points.scale.y = 0.1;
  points.scale.z = 0.1;
  points.pose.orientation.w = 1.0;
  points.pose.orientation.x = 0.0;
  points.pose.orientation.y = 0.0;
  points.pose.orientation.z = 0.0;

  obst_1.pose.position.x = 2;
  obst_1.pose.position.y = 0;
  obst_1.pose.position.z = 0.5;
  obst_1.pose.orientation.x = 0.0;
  obst_1.pose.orientation.y = 0.0;
  obst_1.pose.orientation.z = 0.0;
  obst_1.pose.orientation.w = 1.0;

  obst_1.scale.x = 0.1;
  obst_1.scale.y = 1;
  obst_1.scale.z = 1;

  obst_1.id = 4;
  obst_1.color.a = 1.0;
  obst_1.color.r = 0.0;
  obst_1.color.g = 0.5;
  obst_1.color.b = 0.5;

  obst_2.scale.x = 0.5;
  obst_2.scale.y = 0.5;
  obst_2.scale.z = 0.5;

  obst_2.id = 5;
  obst_2.color.a = 1.0;
  obst_2.color.r = 0.0;
  obst_2.color.g = 0.5;
  obst_2.color.b = 0.5;
  
  //obst_1.mesh_resource = mesh_resource;
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "mesh_visualization");

  ros::NodeHandle nh("~");

  nh.param("mesh_resource", mesh_resource, std::string("package://mesh_visualization/meshes/IRIS.STL"));
  nh.param("color/r", color_r, 1.0);
  nh.param("color/g", color_g, 0.0);
  nh.param("color/b", color_b, 0.0);
  nh.param("color/a", color_a, 1.0);

  pub_pt = nh.advertise<visualization_msgs::Marker>("published_points", 10);
  ros::Subscriber odom_sub = nh.subscribe("odom_raw", 10, &odom_callback, ros::TransportHints().tcpNoDelay());
  ros::Subscriber posCmd_sub = nh.subscribe("position_cmd", 10, &pos_callback, ros::TransportHints().tcpNoDelay());
  pub_vis = nh.advertise<visualization_msgs::Marker>("robot", 10);


  // Initialize Marker
  obst_init();
  quad_init();


  ros::spin();

  return 0;
}
